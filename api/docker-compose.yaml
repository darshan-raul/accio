services:
  db:
    image: postgres
    restart: always
    environment: &psqlenv # these will be reused below [compose fragment concept]
      POSTGRES_PASSWORD: password
      POSTGRES_USER: acciod
      POSTGRES_DB: accio
    volumes:
      - type: volume
        source: db-data
        target: /var/lib/postgresql/data
    ports:
      - 5432:5432
    networks:
      - backend
  redis:
    image: redis
    restart: always
    ports:
      - 6379:6379
    networks:
      - backend
  core:
    image: core-api:0.1
    restart: always
    environment:
      JWT_SECRET_KEY: secret
      JWT_SECRET_KEY_EXPIRE_MINUTES_COUNT: 15
      JWT_REFRESH_KEY: "refresh"
      JWT_REFRESH_KEY_EXPIRE_HOURS_COUNT: 720
      DB_TYPE: "pgx"
      DB_HOST: "db"
      DB_PORT: 5432
      DB_USER: "acciod"
      DB_PASSWORD: "password"
      DB_NAME: "accio"
      DB_SSL_MODE: "disable"
      DB_MAX_CONNECTIONS: 100
      DB_MAX_IDLE_CONNECTIONS: 10
      DB_MAX_LIFETIME_CONNECTIONS: 2
      REDIS_HOST: "redis"
      REDIS_PORT: 6379
      REDIS_PASSWORD: ""
      REDIS_DB_NUMBER: 0
      STAGE_STATUS: "dev"
      SERVER_HOST: "0.0.0.0"
      SERVER_PORT: 5000
      SERVER_READ_TIMEOUT: 60
    ports:
      - 5000:5000
    networks:
      - backend
    depends_on:
      db:
        condition: service_started
      redis:
        condition: service_started
      broker:
        condition: service_started
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend
  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - backend
volumes:
  db-data:
    name: "postgres"
networks:
  backend: